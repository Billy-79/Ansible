#Make initial connection
ssh 192.168.1.7   --then-> type yes --then-> type password
ssh 192.168.1.13   --then-> type yes --then-> type password

#Generating ssh key
ls -la .ssh
ssh-keygen -t ed25519 -C "billy default"
#then accept default path /home/billy/.ssh/id_ed25519 
#and enter a passphrase twice to confirm
ls -la .ssh
#id_ed25519.pub is the private key
#id_ed25519 is the private key (KEEP IT SECRET)

#Add/copy ssh key to the server
ssh-copy-id -i ~/.ssh/id_ed25519.pub 192.168.1.7  -then-> enter password
ssh-copy-id -i ~/.ssh/id_ed25519.pub 192.168.1.13  -then-> enter password

#Connect using the ssh key
ssh 192.168.1.7   --then-> type passphrase
ssh 192.168.1.13   --then-> type passphrase

#Generating ssh key that is dedicated only to ansible
ssh-keygen -t ed25519 -C "ansible"
#then accept default path, but give a different name 
#/home/billy/.ssh/ansible
#BUT DON'T CREATE A PASSPHRASE to have the ability to auto-login

#Add/copy ansible ssh key to the server
ssh-copy-id -i ~/.ssh/ansible.pub 192.168.1.7  -then-> enter passphrase
ssh-copy-id -i ~/.ssh/ansible.pub 192.168.1.13  -then-> enter passphrase
#You must enter the passphrase for the default key: id_ed25519.pub

#How to use ansible key / how to tell which key to use
ssh -i ~/.ssh/ansible 192.168.1.7
ssh -i ~/.ssh/ansible 192.168.1.13
#NOTICE that it connects automatically as there is no passphrase
#VERY IMPORTANT TO KEEP ANSIBLE KEY SECRET

#If you terminate terminal session you should enter the passphrase
#again to connect. A solution is to use ssh-agent to cache the passphrase
#in order to auto-login. Use the following method:
eval "$(ssh-agent)"
#That give us the process id of the process running in the background
ps aux | grep 2362 
#Where 2362 is the process id. Now that we confirm the process is
#running in the background, we can run the following command:
ssh-add ~/.ssh/ansible   --then-> enter the passphrase for id_ed25519.pub key
#Now if you do:
ssh 192.168.1.7
#It will connect you automatically, but it is not permanent
#If we close the terminal we should cache it again to the ssh-agent
#The solution is to add an alias for the command:
alias ssha='eval $(ssh-agent) && ssh-add'
#Finally we can store that alias to our .bashrc file to make it permanent

#Then we also add id_ed25519.pub ssh key to gihub.com from 
#profile icon -> settings

#Then clone repository to our pc:
git clone git@github.com:Billy-79/Ansible.git

#Before start with git we should give it some info:
git config --global user.name "Billy"
git config --global user.email "learnlinuxtv@gmail.com"
#These are stored at ~/.gitconfig

#Install ansible
sudo apt update
sudo apt install ansible

#Create an inventory file to list hosts
nano inventory
#Here we are add the ip address for each host one at each line

#Running ad-hoc commands
ansible all --key-file ~/.ssh/ansible -i inventory -m ping
#Shorten previous command by creating an ansible.cfg file inside our repo
nano ansible.cfg
#We add the following:
[defaults]
inventory = inventory
private_key_file = ~/.ssh/ansible
#So the previous command can be:
ansible all -m ping

#List the hosts
ansible all --list-hosts

#Gather info from all servers
ansible all -m gather_facts
#Gather info from a specific host
ansible all -m gather_facts --limit 192.168.1.7

#Running ad-hoc commands with elevated privileges
ansible all -m apt -a update_cache=true --become --ask-become-pass
#e.g. the previous is equal to "sudo apt update"
#install vim-nox and htop packages to all hosts
ansible all -m apt -a name=vim-nox --become --ask-become-pass
ansible all -m apt -a name=htop --become --ask-become-pass
#Update a package to it's latest version / make sure it is updated
ansible all -m apt -a "name=vim-nox state=latest" --become --ask-become-pass
#Updade the system by installing all updates
ansible all -m apt -a upgrade=full --become --ask-become-pass

#Writing our first playbook:
nano install_apache.yml
#VERY IMPORTANT is spacing (indentation) and the .yml extension

#Running the playbook:
ansible-playbook --ask-become-pass install_apache.yml

#When statements: when we have a few different distros to manipulate:
when: ansible_distribution in ["Debian", "Ubuntu"]
#we use "in" not "==" and square brackets with double quotes

#Gather distribution info from a specific host
ansible all -m gather_facts --limit 192.168.1.7 | grep ansible_distribution
#From this output we could use another or even two variables to target 
#specific distros and versions

#With RedHat like distros such as Fedora the apache service (httpd)
#doesn't start automatically after installation or enabled on startup
#Moreover, listening port 80 does not open automatically, so
#use the following commands:
sudo systemctl enable httpd
sudo systemctl start httpd
sudo firewall-cmd --add-port=80/tcp

#To list all the tags inside a playbook:
ansible-playbook --list-tags site.yml

#To run playbook with tags to target specific hosts:
ansible-playbook --tags samba --ask-become-pass site.yml

#To run multiple tags:
ansible-playbook --tags "samba,ubuntu" --ask-become-pass site.yml

#When we make more than one change to a config file in a webserver and 
#store that change to a variable in a playbook (e.g. register: httpd), 
#we should save each status (change/no change) with a different variable 
#name. That because if we have two tasks in which the first only made 
#a change and store it in e.g. httpd variable and the second task (which 
#doesn't make a change) store it also in e.g. httpd, it will replace the 
#status in the variable as no change and the next task will not restart 
#the httpd service. The only difference is to check both/all variables if 
#they had a change "status: true".

